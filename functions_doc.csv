Sl_No,Id,Function Name,Description,Code
1,668f9a6edf37285a6d444a2d,getMagazinesList,aritra@yellow.ai,"return new Promise(resolve => {
    let magazinesListArray = data.variables.magazinesListArray;
    console.log(magazinesListArray, ""###API Response - magazinesListArray"");

    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/sml/"";
    
    


    for (let i of magazinesListArray) {
        let mag_name = i.slug;
        let mag_uri = `https://www.delhipress.in/subscribe/${mag_name}#single-magazine`
        carouselList.push({
            ""title"": i.name,
            ""text"": i.description,
            ""image"": images_prefix + i.guid,
            ""actions"": [
                {
                    ""title"": ""Subscribe"",
                    ""buttonDefault"": ""text"",
                    ""text"": ""Subscribe""
                },
                // {
                //     ""title"": ""Get More Info"",
                //     ""buttonDefault"": ""url"",
                //     ""url"": `${mag_uri}`,
                // }
            ]
        });
    }
    
    console.log(carouselList, ""###carouselList Array"");
    return resolve(carouselList);
});              "
2,668f9a6edf3728272c444a30,getSubscribedItemsList,aritra@yellow.ai,"return new Promise(resolve => {
    let subscribtionsListArray = data.variables.subscribedItemsArray;
    console.log(subscribtionsListArray, ""###API Response - subscribtionsListArray"");

    let selectedSubscriptionCode = data.variables.selected_subscription_code;
    console.log(selectedSubscriptionCode, ""###selectedSubscriptionCode"");

    let specificObject = subscribtionsListArray.find(item => item.subscriber.subscriptionCode === selectedSubscriptionCode);
    console.log(specificObject, ""###Fetched Sub Info"");


    let magazine_code = specificObject.magazine;
    // let magazine_code = ""HG"";
    console.log(magazine_code, ""Magazine Code"");

    let magazineList = data.variables.magazinesListArray;
    let magazineInfo = magazineList.find(mag => mag.magazine_code === magazine_code);
    console.log(magazineInfo, ""Magazine Info"")


    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";

    if(magazineInfo){
        carouselList.push({
            ""title"": magazineInfo.name,
            ""image"": images_prefix + magazineInfo.guid,
            ""text"": `<strong>Expiry Date:</strong> ${specificObject.toDate.split(""T"")[0]}
<strong>Last Plan Duration:</strong> ${specificObject.duration} Year(s)
<strong>Subscribed Amount:</strong> ${specificObject.amount}
<strong>Renewal Discount:</strong> ${(specificObject.amount * 5 / 100).toFixed(2)}`,
            ""actions"": [
                {
                    ""title"": ""Renew Subscription"",
                    ""buttonDefault"": ""text"",
                    // ""text"": `821-Rs. ${specificObject.amount}`
                    ""text"": magazine_code
                }
            ]
        });
    }else{
        console.log(""Magazine not found"");
        carouselList.push({
            ""title"": specificObject.magazine_code,
            ""text"": `<strong>Expiry Date:</strong> ${specificObject.toDate.split(""T"")[0]}
<strong>Last Plan Duration:</strong> ${specificObject.duration} Year(s)
<strong>Subscribed Amount:</strong> ${specificObject.amount}
*Note: Currently Magazine is not available`,
            ""actions"": [
                {
                    ""title"": ""Explore Other Magazines"",
                    ""buttonDefault"": ""text"",
                    ""text"": ""Explore Our Brands""
                }
            ]
        });
    }


    console.log(carouselList, ""###carouselList Array"");
    return resolve(carouselList);
});                                                                                        "
3,668f9a6edf3728c31b444a38,getSubscribedItemsStatus,aritra@yellow.ai,"function fetchMagazineDetails(magazineCode) {
    const magazineList = data.variables.magazinesListArray;
    console.log(magazineList, ""MAG List"");

    const magazine = magazineList.find(mag => mag.magazine_code == magazineCode);
    if (magazine) {
        return magazine;
    } else {
        return null;
    }
}

return new Promise(resolve => {
    let subscribtionsListArray = data.variables.subscribedItemsArray;
    console.log(subscribtionsListArray, ""###API Response - subscribtionsListArray"");

    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/sml/"";


    for (let i of subscribtionsListArray) {

        let magazineDetails = fetchMagazineDetails(i.magazine);
        console.log(magazineDetails, ""###Magazin Details from Sub"");
        if(magazineDetails){
            carouselList.push({
                ""title"": magazineDetails.name,
                ""image"": images_prefix + magazineDetails.guid,
                ""text"": `<strong>Name:</strong> ${i.magazine} - ${magazineDetails.name}
<strong>Expiry Date:</strong> ${i.toDate.split(""T"")[0]}
<strong>Last Plan Duration:</strong> ${i.duration} Year(s)
`,
            });
        }else{

            carouselList.push({
                ""title"": `${ i.magazine }`,
                ""text"": `<strong>Name:</strong> ${i.magazine}
<strong>Expiry Date:</strong> ${i.toDate.split(""T"")[0]}
<strong>Last Plan Duration:</strong> ${i.duration} Year(s)
`,
            });
        
        }
        
    }

    console.log(carouselList, ""###carouselList Array"");
    return resolve(carouselList);
});                                                          "
4,668f9a6edf37280db1444a3f,strToInt,anant.gupta@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here
    let str = data.variables.idStrType;
    console.log(""id str type"",str)
    console.log(""id int type"", parseInt(str, 10))
    // return ;
    resolve(parseInt(str, 10));
});   "
5,668f9a6edf372848dc444a40,orderStatusList,aritra@yellow.ai,"return new Promise(resolve => {
    let orderList = data.variables.resObj;
    let orderListArray = orderList.content;

    console.log(orderListArray, ""OrderList Array"");

    let qrList = [];

    for (let i of orderListArray) {
        qrList.push({ title: i.id, text: i.id });
    }

    // Dynamic Quick Reply | WhatsApp list to show Order Numbers
    let qrObject = {
        ""title"": ""We can do that! Could you please select the Order ID for me?"",
        ""options"": qrList
    };


    if (data.channel == ""whatsapp"") {
        qrObject = {
            title: 'We can do that! Could you please select the Order ID for me?',
            optionText: 'Options',
            options: [
                {
                    options: qrList
                }
            ]
        }
    }


    console.log(qrObject, ""### qrObject"");
    return resolve(qrObject);

});      "
6,668f9a6edf37287c6e444a49,addressLenValidation,aritra@yellow.ai,"return new Promise(resolve => {
    let address = data.variables.address;

    console.log(address, ""#address"");
    console.log(address.length, ""#Address Len"");
    
    if(address.length < 120 ){
        resolve(""T"");
    }else{
        resolve(""F"")
    }
});  "
7,668f9a6edf3728b2e6444a55,getCurrentDate,aritra@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here

    let currentDate = new Date().toISOString();
    console.log(currentDate, ""###Current Date"");

    resolve(currentDate);
});  "
8,668f9a6edf37284f1e444a56,createToDate,aritra@yellow.ai,"return new Promise(resolve => {
    const fromDate = new Date(data.variables.entDate);
    const duration = data.variables.duration;
    // Set hours, minutes, seconds, and milliseconds to zero
    fromDate.setHours(0, 0, 0, 0);

    console.log(duration, ""###Selected Mag Duration in Years"");
    console.log(fromDate, ""###From Date"");



    const endDate = new Date(fromDate.getTime() + (duration - 1 / 365.25) * 365.25 * 24 * 60 * 60 * 1000);

    console.log(endDate, ""###End Date"");

    if (isNaN(endDate.getTime())) {
        console.error(""Error: Invalid starting date provided."");
        resolve(null);
    } else {
        // Set hours, minutes, seconds, and milliseconds of endDate to zero
        endDate.setHours(0, 0, 0, 0);

        const toDate = endDate.toISOString().slice(0, 24) + 'Z';

        console.log(toDate, ""###ToDate"");
        resolve(toDate);
    }
});


// return new Promise(resolve => {
//     const fromDate = new Date(data.variables.entDate);
//     const duration = data.variables.duration;

//     // Set hours, minutes, seconds, and milliseconds to zero
//     fromDate.setHours(0, 0, 0, 0);

//     console.log(duration, ""###Selected Mag Duration in Years"");
//     console.log(fromDate, ""###From Date"");

//     // Calculate endDate based on the given logic
//     const endDate = new Date(fromDate);
//     endDate.setFullYear(endDate.getFullYear() + duration);
//     endDate.setDate(endDate.getDate() - 1);

//     console.log(endDate, ""###End Date"");

//     if (isNaN(endDate.getTime())) {
//         console.error(""Error: Invalid starting date provided."");
//         resolve(null);
//     } else {
//         // Set hours, minutes, seconds, and milliseconds of endDate to zero
//         endDate.setHours(0, 0, 0, 0);

//         const toDate = endDate.toISOString().slice(0, 24) + 'Z';

//         console.log(toDate, ""###ToDate"");
//         resolve(toDate);
//     }
// });








           "
9,668f9a6edf37284657444a69,selectAddressWA,aritra@yellow.ai,"return new Promise(resolve => {
    let addresses = data.variables.addressObj.addressList;
    console.log(addresses, ""####Addresses List"");

    let emojiNumbers = ['1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟'];

    let buttons = addresses.map((address, index) => ({
        title: address,
        text: emojiNumbers[index] || `${index + 1}`
    }));

    let resultString = buttons.map(button => `${button.text}: ${button.title}`).join('\n\n');

    resolve(resultString);
});  "
10,668f9a6edf3728029c444a2c,isContactable,aritra@yellow.ai,"return new Promise(resolve => {
    function isContactable() {
        const now = new Date();
        console.log(now, ""Current Date"");
        const dayOfWeek = now.getDay(); // 0 (Sunday) to 6 (Saturday)
        const hour = now.getHours();

        console.log(dayOfWeek, ""Day"");
        console.log(hour, ""Time"");

        // Check if it's Monday to Saturday and between 10 AM and 6 PM
        if (dayOfWeek >= 1 && dayOfWeek <= 6 && hour >= 10 && hour < 18) {
            return true;
        } else {
            return false;
        }
    }

    if (isContactable() === true) {
        console.log(""###Contact able - True"");
        return resolve(""T"");
    } else {
        console.log(""###Contact able - Falase"");
        return resolve(""F"");
    }
});     "
11,668f9a6edf3728049b444a3a,extractAmountData,aritra@yellow.ai,"return new Promise(resolve => {
    let inputString = data.variables.selected_plan;
    const regex = /(\d+)-Rs\. (\d+)/; // Updated regex to extract numeric part of amount
    const match = regex.exec(inputString);
    let planData = null;

    if (match) {
        const planName = match[1];
        const amount = parseFloat(match[2]);


        console.log(""Plan Name:"", planName);
        console.log(""Amount:"", amount);

        planData = {
            planName: planName,
            amount: amount,
            amountRazorPay: amount * 100
        }
    } else {
        console.log(""No match found."");
    }

    console.log(planData, ""###planData."");
    resolve(planData);
});
       "
12,668f9a6edf3728fe0b444a2f,liveAgentConnect,aritra@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here
    let agentInfo = data.variables.agentTicketObj;
    console.log(agentInfo, ""###Live Agent info"");
    resolve();
});   "
13,668f9a6edf3728092f444a32,extractSelectedMagazines,aritra@yellow.ai,"return new Promise(resolve => {
    let magazinesListArray = data.variables.magazinesListArray;
    console.log(magazinesListArray, ""###API Response - magazinesListArray"");

    let selected_type = data.variables.selected_type;
    console.log(selected_type, ""###Selected Button"");
    let magazine_filter = """";
    if (selected_type === ""# Button 1"") {
        magazine_filter = ""champak_magazines"";
    } else if (selected_type === ""# Button 2"") {
        magazine_filter = ""champak_books"";
    }

    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";


    if (magazine_filter) {
        for (let i of magazinesListArray) {
            let mag_name = i.slug;
            let mag_uri = `https://www.delhipress.in/subscribe/${mag_name}#single-magazine`;

            let image_postfix = i.guid;
            image_postfix = image_postfix.replace(""jpg"", ""png"");

            let description_text = (i.short_description === null) ? i.description.slice(0, 100) : i.short_description;

            // Prioritize magazine types and exclude combo_offer
            if (magazine_filter == ""champak_books"" && magazine_filter === i.magazine_filter && i.magazine_type != ""combo_offer"") {

                let priority = {
                    ""champak_story_box"": 1,
                    ""activity_books"": 2,
                    ""early_childhood_books"": 3,
                    ""magazine"": 4
                };

                // Insert magazine based on priority order
                // let insertIndex = priority[i.magazine_type];
                // carouselList.splice(insertIndex ? insertIndex - 1 : carouselList.length, 0, {

                carouselList.push({
                    ""title"": i.name,
                    ""text"": description_text,
                    ""image"": images_prefix + image_postfix,
                    // ""image"": {
                    //     ""url"": images_prefix + i.guid,
                    //     ""height"": 180, // Adjust the height as needed
                    //     ""width"": ""auto""  // Adjust the width as needed
                    // },
                    ""actions"": [
                        {
                            ""title"": ""Subscribe"",
                            ""buttonDefault"": ""text"",
                            ""text"": `${i.slug}`
                        }
                    ]
                });
            } else if (magazine_filter == ""champak_magazines"" && magazine_filter === i.magazine_filter && i.magazine_type != ""combo_offer"") {


                // Sequence : CE, CH, HC, HG, CK, CM, CG, CT, CU
                let priority = {
                    ""CE"": 1,
                    ""CH"": 2,
                    ""HC"": 3,
                    ""HG"": 4,
                    ""CK"": 5,
                    ""CM"": 6,
                    ""CG"": 7,
                    ""CT"": 8,
                    ""CU"": 9
                };

                let image_postfix = i.guid;
                image_postfix = image_postfix.replace(""jpg"", ""png"");



                // Insert magazine based on priority order
                let insertIndex = priority[i.magazine_code];
                carouselList.splice(insertIndex ? insertIndex - 1 : carouselList.length, 0, {
                    ""title"": i.name,
                    ""text"": description_text,
                    ""image"": images_prefix + image_postfix,
                    ""actions"": [
                        {
                            ""title"": ""Subscribe"",
                            ""buttonDefault"": ""text"",
                            ""text"": `${i.slug}`
                        }
                    ]
                });
            }
        }
    } else {

        for (let i of magazinesListArray) {
            let mag_name = i.slug;
            let mag_uri = `https://www.delhipress.in/subscribe/${mag_name}#single-magazine`;

            let image_postfix = i.guid;
            image_postfix = image_postfix.replace(""jpg"", ""png"");
            let description_text = (i.short_description === null) ? i.description.slice(0, 100) : i.short_description;



            carouselList.push({
                ""title"": i.name,
                ""text"": description_text,
                ""image"": images_prefix + image_postfix,
                ""actions"": [
                    {
                        ""title"": ""Subscribe"",
                        ""buttonDefault"": ""text"",
                        ""text"": `${i.slug}`
                    }
                ]
            });

        }

    }

    console.log(carouselList.length, ""###carouselList Length"");
    console.log(carouselList, ""###carouselList Array"");
    return resolve(carouselList);
});
                         "
14,668f9a6edf37284232444a35,selectPlanSubscribe,aritra@yellow.ai,"return new Promise(resolve => {
    let itemDetailsObj = data.variables.itemDetailsObj;
    console.log(itemDetailsObj, ""####Selected Item Details"");

    let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";
    let imege_uri = images_prefix + itemDetailsObj.subscribe_item[0].guid.replace(""jpg"", ""png"");
    let maz_title = itemDetailsObj.subscribe_item[0].name;

    let carouselList = [];

    if (data.channel == ""whatsapp"") {
        for (let i of itemDetailsObj.plans) {
            let htmlRegex = /(<([^>]+)>)/ig;
            let star_info = i.information.replace(htmlRegex, """");

            carouselList.push({
                ""title"": `${maz_title}`,
                ""image"": imege_uri,
                ""text"": `Plan Duration: ${i.tenure} (${i.issue} Issues)`,
                ""actions"": [
                    {
                        ""title"": `Plan - ${i.currency}${i.subprice}`,
                        ""buttonDefault"": ""text"",
                        ""text"": `${i.id}-${i.currency} ${i.subprice}`
                    },
                    {
                        ""title"": `Go Back`,
                        ""buttonDefault"": ""text"",
                        ""text"": `Go Back`
                    }
                ]
            });
        }
    }
    else {
        for (let i of itemDetailsObj.plans) {
            let htmlRegex = /(<([^>]+)>)/ig;
            let star_info = i.information.replace(htmlRegex, """");

            carouselList.push({
                ""title"": `${maz_title}`,
                ""image"": imege_uri,
                ""text"": `<strong>Plan Duration:</strong> ${i.tenure} (${i.issue} Issues)
<strong>Regular Price:</strong> ${i.currency}${i.display_price}
<strong>Discounted Price:</strong> ${i.currency}${i.discount_price}
${star_info}

<strong>Total Price: ${i.currency}${i.subprice}</strong>`,
                ""actions"": [
                    {
                        ""title"": `Select Plan - ${i.currency}${i.subprice}`,
                        ""buttonDefault"": ""text"",
                        ""text"": `${i.id}-${i.currency} ${i.subprice}`
                    },
                    {
                        ""title"": `Go Back`,
                        ""buttonDefault"": ""text"",
                        ""text"": `Go Back`
                    }
                ]
            });
        }
    }


    console.log(carouselList, ""###carouselList Array"");
    return resolve(carouselList);
});                                             "
15,668f9a6edf37281481444a3e,test,anant.gupta@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here
        let res = data.variables.updateProfile;
    console.log(""updateProfile response is"", res)
        resolve();
    });  "
16,668f9a6edf3728148e444a41,getSpecificOrderStatus,aritra@yellow.ai,"return new Promise(resolve => {
    let orderList = data.variables.resObj;
    let orderListArray = orderList.content;
    console.log(orderListArray, ""OrderList Array"");

    let selected_order_id = data.variables.selected_order_id;
    console.log(selected_order_id, ""#Selected Order ID"");

    const order = orderListArray.find(order => order.id === selected_order_id);
    

    
    let selectedOrder = orderList.find(order => order.id === selected_order_id);

    if (selectedOrder) {
        console.log(order, ""### Order Status Details"");
        return resolve(selectedOrder);
    } else {
        console.log(""Order not found"");
    }

});                     "
17,668f9a6edf37282b30444a43,getAddressList,aritra@yellow.ai,"return new Promise(resolve => {

    let subscriberInfo = data.variables.subscriberData;
    console.log(subscriberInfo, ""###Subscriber Info"");
    let addressArray = subscriberInfo.content;
    console.log(addressArray, ""###Address Array""); 

    let qrList = [];

    for (let i of addressArray) {
        let addressText = i.subscriber.addr1 + i.subscriber.city;
        qrList.push({ title: addressText, text: i.subscriber.id });
    }

    // Dynamic Quick Reply | WhatsApp list to show Order Numbers
    let qrObject = {
        ""title"": ""Got it. I found a couple of addresses in your account. Where would you like to have your books delivered to?"",
        ""options"": qrList
    };


    if (data.channel == ""whatsapp"") {
        qrObject = {
            title: 'Got it. I found a couple of addresses in your account. Where would you like to have your books delivered to?',
            optionText: 'Options',
            options: [
                {
                    options: qrList
                }
            ]
        }
    }


    console.log(qrObject, ""### qrObject"");
    return resolve(qrObject);

});           
  "
18,668f9a6edf37287713444a54,addressObj,aritra@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here

        let address_data = {
            ""locationCode"": ""test"",
            ""addr1"": data.variables.addr1,
            ""addr2"": data.variables.addr2,
            ""addr3"": data.variables.addr3,
            ""addr4"": data.variables.addr4,
            ""landmark"": data.variables.landmark,
            ""pincode"": data.variables.pincode,
            ""city"": data.variables.city,
            ""city_code"": data.variables.city_code,
            ""state_provience"": data.variables.state_provience,
            ""country"": data.variables.country,
        }

        console.log(address_data, ""Address Data OBJ"");
        resolve(address_data);
}); "
19,668f9a6edf37280245444a76,getNoOfIssues,aritra@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here
    let itemDetailsObj = data.variables.itemDetailsObj;
    let selectedAmount = data.variables.qrObj.amount;

    let issue;
    for (let i = 0; i < itemDetailsObj.plans.length; i++) {
        if (itemDetailsObj.plans[i].inr_subprice == selectedAmount) {
            issue = itemDetailsObj.plans[i].issue;
            console.log(issue);
            resolve(issue)
        }
    }

    if (!issue) {
        resolve(""1"");
    }
    resolve();
});  "
20,668f9a6edf37288223444a48,extractSubscriberInfo,aritra@yellow.ai,"return new Promise(resolve => {
    let subscriberData = data.variables.subscriberData;
    let subscriptionCode = data.variables.selected_subscription_code;
    let specificObject = subscriberData.content.find(item => item.subscriptionCode === subscriptionCode);

    // Check if specific object is found
    if (specificObject) {
        console.log(""Found specific object:"", specificObject);
        resolve(specificObject);
    } else {
        console.log(""No object found with the given subscription code."");
        resolve(null);
    }
    resolve(null);
});     "
21,668f9a6edf37284a45444a4a,getCityCodeAPIresponseFunction,anant.gupta@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here
    let res = data.variables.getCityCodeAPIresponse;
    let obj = res.content[0];
    
    
    resolve(obj.cityCode);
});  "
22,668f9a6edf37284529444a5f,renewSubscriptionList,aritra@yellow.ai,"return new Promise(resolve => {
    let purchaseHistory = data.variables.subscribedItemsArray;
    let magazinesList = data.variables.magazinesListArray;

    console.log(purchaseHistory.length, ""### PurchaseHistory Len"");

    // Create a map for magazine_code to magazine details
    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = {
            name: magazine.name,
            description: magazine.description,
            guid: magazine.guid
        };
    });

    console.log(magazineMap, ""### Magazine Map"");

    // Update each object in purchaseHistory with the corresponding magazine details
    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";

    const today = new Date();
    const sixMonthsAgo = new Date(today.getTime() - (6 * 30 * 24 * 60 * 60 * 1000));
    const sixMonthsFromNow = new Date(today.getTime() + (6 * 30 * 24 * 60 * 60 * 1000));

    for (let i of purchaseHistory) {
        const purchaseDate = new Date(i.fromDate);
        const magazineDetails = magazineMap[i.magzCode];

        console.log(purchaseDate, ""### Purchase Date"");

        // Add this extra check
        if (!magazineDetails) {
            console.log(`Magazine details not found for code: ${i.magzCode}`);
            continue;  // Skip to the next iteration if magazine details are not found
        }

        console.log(magazineDetails, ""### Magazine Details"");

        // Check if purchase date is within the past or next 6 months
        if (purchaseDate >= sixMonthsAgo && purchaseDate <= sixMonthsFromNow) {
            let description = `<strong>Subscription Start Date:</strong> ${new Date(i.fromDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
            description += `<strong>Subscription End Date:</strong> ${i.toDate ? new Date(i.toDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'N/A'}\n`;

            console.log(magazineDetails, ""### Mag Details"");
            carouselList.push({
                ""title"": magazineDetails.name,
                ""image"": images_prefix + magazineDetails.guid.replace(""jpg"", ""png""),
                ""text"": description,
                ""actions"": [
                    {
                        ""title"": ""Renew Subscription"",
                        ""buttonDefault"": ""text"",
                        ""text"": `${i.slug}`
                    }
                ]
            });
        }
    }

    console.log(carouselList, ""### carouselList Array"");
    resolve(carouselList);
});
"
23,668f9a6edf372852a4444a66,multiMazLoop,aritra@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here
    let number = data.variables.loopIndexNo;
    number = number-1;

    console.log(number, ""###Iteration Log"");

    resolve(number);
});   "
24,668f9a6edf3728124f444a4f,validateNumberInput,aritra@yellow.ai,"return new Promise(resolve => {

    let user_input = data.variables.quantity;
    let res = ""F"";

    const regex = /^[1-9][0-9]?$|^100$/;


    if (regex.test(user_input)) {
        res = ""T"";
    }

    
    resolve(res);
});   "
25,668f9a6edf37286608444a33,getMagazinDetails,aritra@yellow.ai,"return new Promise(resolve => {
    let itemDetailsObj = data.variables.itemDetailsObj;
    console.log(itemDetailsObj, ""####Selected Item Details"");
    resolve(itemDetailsObj);
});  "
26,668f9a6edf372812ed444a3c,addressFormatMaker,aritra@yellow.ai,"return new Promise(resolve => {
    let str = data.variables.address;
    const maxLength = 30;
    const parts = [];

    // Split address by spaces and commas
    let words = str.split(/([ ,]+)/); // Capture spaces and commas as separate tokens
    let segment = """";

    words.forEach((word, index) => {
        if (segment.length + word.length <= maxLength) {
            segment += word;
        } else {
            parts.push(segment.trim());
            segment = word.trim();
        }
    });
    if (segment.length > 0) {
        parts.push(segment.trim());
    }

    // Ensure parts array has exactly 4 elements
    while (parts.length < 4) {
        parts.push('');
    }
    while (parts.length > 4) {
        parts.pop();
    }

    // Check for a 6-digit number
    const match = str.match(/\b\d{6}\b/);
    parts.push(match ? match[0] : ""notPresent"");

    resolve(parts);
});









// return new Promise(resolve => {
//     // Your logic goes here
//     let str = data.variables.address;
//     const maxLength = 30;
//     const parts = [];

//     for (let i = 0; i < str.length; i += maxLength) {
//         parts.push(str.slice(i, i + maxLength));
//     }

//     while (parts.length < 4) {
//         parts.push('');
//     }

//     while (parts.length > 4) {
//         parts.pop()
//     }

//     const regex = /\b\d{6}\b/g;
//     const matches = str.match(regex);

//     // If matches are found, return the first one
//     if (matches && matches.length > 0) {
//         parts.push(matches[0]);
//     } else {
//         parts.push(""notPresent"");
//     }

//     resolve(parts);
// });        "
27,668f9a6edf3728f9d6444a3d,pinValidation,anant.gupta@yellow.ai,"return new Promise(resolve => {
    console.log(""pincode validation"")
    let pin = data.variables.pincode;
    if (/^\d{6}$/.test(pin)) {
        // Check if the first digit is not 0
        if (pin[0] !== '0') {
            resolve(""true"");
        }
    }
    resolve(""false"");
});                      "
28,668f9a6edf37282ee2444a45,selectAddress,aritra@yellow.ai,"return new Promise(resolve => {
    let addresses = data.variables.addressObj.addressList;
    console.log(addresses, ""####Addresses List"");
    
    let buttons = addresses.map((address, index) => ({
        title: address,
        buttonDefault: ""text"",
        text: `${index+1}`
    }));

    let carouselList = [];

    carouselList.push({
        ""actions"": buttons
    });
    
    let qrObject;

    if (data.channel == ""whatsapp"") {
        qrObject = {
            optionText: 'Options',
            options: [
                {
                    options: carouselList
                }
            ]
        }
        resolve(qrObject);
    }
    if (data.channel == ""facebook"") {
        qrObject = {
            ""options"": carouselList
        }
        resolve(qrObject);
    }

        


    console.log(carouselList, ""###Address carouselList Array"");
    return resolve(carouselList);
});                                                    "
29,668f9a6edf37287964444a52,getMagName,aritra@yellow.ai,"return new Promise(resolve => {
    let itemDetailsObj = data.variables.itemDetailsObj;

    console.log(itemDetailsObj, ""###Item Details Obj"");

    let images_prefix = ""https://www.delhipress.in/assets/images/cover/sml/"";
    let imege_uri = images_prefix + itemDetailsObj.subscribe_item[0].guid;
    let maz_title = itemDetailsObj.subscribe_item[0].name;
    let mag_name = `${maz_title}`;

    console.log(mag_name, ""###Mag Name"");
    return resolve(mag_name);
});                                              "
30,668f9a6edf3728b25c444a5a,parseAPIid,aritra@yellow.ai,"return new Promise(resolve => {
    try {
        let apiResponse = ymLib.args.apiResponse; // fetch API response
        console.log(apiResponse, ""###API Response Raw"");


        if (apiResponse && apiResponse.body && apiResponse.body != ""NaN"") {
            let body = JSON.parse(apiResponse.body) // parse API response and store it in body variable
            resolve(body);
        }
        resolve(0);

    } catch (e) {
        console.error(""Error fetching API response:"", e);
        resolve(0);
    }

    resolve(0);
});
    "
31,668f9a6edf37282e1c444a62,iterationOne,aritra@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here

    let index = data.variables.iteratorIndex;

    let indexNumber = Number(index);
    let counter = indexNumber + 1;
    
    console.log(counter, ""###Counter"");


    resolve(String(counter));
});     "
32,668f9a6edf3728d530444a63,getCityName,aritra@yellow.ai,"return new Promise(resolve => {
    let index = data.variables.selectedIndex;
    let city = data.variables.subscriberData.content[index-1].city;
    console.log(city, ""###Selected city name"");
    resolve(city);
});     "
33,668f9a6edf37286150444a65,getTotalNoOfMaz,aritra@yellow.ai,"return new Promise(resolve => {
    let maz_code = data.variables.selectedMazCodeG;

    // Split the maz_code by '+' and filter out any empty strings
    let maz_codes = maz_code.split('+').filter(code => code.length > 0);

    // Count the total number of magazines
    let totalMagazines = maz_codes.length;

    console.log(totalMagazines, ""###totalMagazines"");

    resolve(totalMagazines);
}); "
34,668f9a6edf37281729444a6e,faqResWA,aritra@yellow.ai,"

return new Promise(resolve => {

// Dictionary to store questions and their corresponding answers
    const qaDict = {
        1: ""You can expect the first issue within 2 to 3 weeks of making the payment. You will receive the subscription details on your registered mobile number. For more information, you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        2: ""You can expect the first issue within 2 to 3 weeks of making the payment. You will receive the subscription details on your registered mobile number. For more information, you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        3: ""Please give us your order id or registered mobile number or email id. We will get back to you with an update. For more information you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        4: ""Please give us your subscription number or registered mobile number. We will get back to you with an update. For more information you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        5: ""Please give your order id or registered mobile number. We will get back to you with an update. For more information you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        6: ""We will need to check with the Indian Postal Department regarding the delivery issue. Please give us the order id or registered mobile number. We will get back to you with an update. For more information you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        7: ""Please email the details of the magazine you have received at subscription@delhipress.in Kindly mention your subscription number or registered mobile number along with it. You can also reach out to us at 011-41398888 (extension- 119/264/322) or 8588843408"",
        8: ""Please write to us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408 to cancel the subscription."",
        9: ""Please email us at subscription@delhipress.in or call us at 011-41398888 (extension- 119/264/322) or 8588843408"",
        10: ""Please email the details at subscription@delhipress.in or whatsapp us at 8588843408."",
        11: ""Here are the details for payment via NEFT: Account Name - Delhi Prakashan Vitran Pvt. Ltd. Bank Name - Kotak Mahindra Bank Account Number - 4012162671 IFSC Code - KKBK0004625 Please share your payment details at subscription@delhipress.in for the start of the subscription."",
        12: ""Unfortunately, we do not accept any form of payment on delivery. For more information you can email us at subscription@delhipress.in or call at 011-41398888 (extension- 119/264/322) or 8588843408"",
        13: ""Payment failures are rare. If your payment has not been credited, please email us at subscription@delhipress.in and we will be happy to resolve the issue. Typically the funds are released by the bank or the payment gateway to us. In case you get a refund, please place the order again. Once we get the payment, we will send you a confirmation of the order.""
    };

    // Dictionary to map questions to their indices
    const questions = {
        1: ""I have bought a subscription. When will I receive my first magazine?"",
        2: ""I have not received the magazine even after 15 days of making the payment. When will I receive the magazines?"",
        3: ""I am a subscriber but I haven’t received my latest issue."",
        4: ""I have not received the previous issues of my subscription. How can I get them?"",
        5: ""I have not received the confirmation email for the purchase of my subscription."",
        6: ""I have received the delivery SMS but I haven’t received the magazines."",
        7: ""I have received the wrong magazine."",
        8: ""I want to cancel my subscription. How do I do it?"",
        9: ""I want to change my current magazine subscription."",
        10: ""I would like to change my delivery address and contact number. How do I do that?"",
        11: ""I want to pay for the subscription amount via NEFT. Please share details."",
        12: ""Can I pay COD? Do you accept online payment on delivery?"",
        13: ""What happens if there is a payment failure?""
    };



    // Function to get answer based on index or question text
    function getAnswer(input) {
        // Check if the input is an integer (index)
        const index = parseInt(input, 10);
        if (!isNaN(index)) {
            return qaDict[index] || ""Invalid index"";
        }

        // Check if the input is a question text
        for (const [key, question] of Object.entries(questions)) {
            if (input.trim().toLowerCase() === question.trim().toLowerCase()) {
                return qaDict[key];
            }
        }

        return ""Invalid question text"";
    }
    
    let qn = data.variables.selectedFAQIndex;
    let res = getAnswer(qn);

    console.log(res, ""Generated response"");
    resolve(res);
});    "
35,668f9a6edf3728018b444a6f,renewSubscribtionListWA,aritra@yellow.ai,"return new Promise(resolve => {
    let purchaseHistory = data.variables.subscribedItemsArray;
    let magazinesList = data.variables.magazinesListArray;

    // Create a map for magazine_code to magazine details
    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = {
            name: magazine.name,
            description: magazine.description,
            guid: magazine.guid
        };
    });

    // Initialize a string to store the formatted text
    let formattedText = ""📰 *Your Magazine Subscriptions* 📰\n\n"";

    let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";

    const today = new Date();
    const sixMonthsAgo = new Date(today.getTime() - (6 * 30 * 24 * 60 * 60 * 1000));
    const sixMonthsFromNow = new Date(today.getTime() + (6 * 30 * 24 * 60 * 60 * 1000));

    const emojiNumbers = [
        ""1️⃣"", ""2️⃣"", ""3️⃣"", ""4️⃣"", ""5️⃣"", ""6️⃣"", ""7️⃣"", ""8️⃣"", ""9️⃣"", ""🔟"",
        ""1️⃣1️⃣"", ""1️⃣2️⃣"", ""1️⃣3️⃣"", ""1️⃣4️⃣"", ""1️⃣5️⃣"", ""1️⃣6️⃣"", ""1️⃣7️⃣"", ""1️⃣8️⃣"", ""1️⃣9️⃣"", ""2️⃣0️⃣"",
        ""2️⃣1️⃣"", ""2️⃣2️⃣"", ""2️⃣3️⃣"", ""2️⃣4️⃣"", ""2️⃣5️⃣"", ""2️⃣6️⃣"", ""2️⃣7️⃣"", ""2️⃣8️⃣"", ""2️⃣9️⃣"", ""3️⃣0️⃣""
    ];
    let index = 0;

    for (let i of purchaseHistory) {
        const purchaseDate = new Date(i.fromDate);
        const magazineDetails = magazineMap[i.magzCode];

        // Check if purchase date is within the past or next 6 months
        if (magazineDetails && purchaseDate >= sixMonthsAgo && purchaseDate <= sixMonthsFromNow) {
            let subscriptionStartDate = new Date(i.fromDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' });
            let subscriptionEndDate = i.toDate ? new Date(i.toDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) : 'N/A';

            formattedText += `\t*${emojiNumbers[index]}. ${magazineDetails.name}* 📖\n`;
            formattedText += `🗓️ *Subscription Start Date:* ${subscriptionStartDate}\n`;
            formattedText += `🗓️ *Subscription End Date:* ${subscriptionEndDate}\n\n`;
            index++;
            if (index >= emojiNumbers.length) {
                break; 
            }
        }
    }

    console.log(formattedText, ""###Formatted Text"");
    resolve(formattedText);
});
     "
36,668f9a6edf37289151444a71,selectSubscribtionCodeWA,aritra@yellow.ai,"return new Promise(resolve => {
    let subscriberData = data.variables.subscriberData;
    console.log(subscriberData, ""subscriberData Obj"");

    let resultText = """";

    const numberEmojis = [
        '1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣', '6️⃣', '7️⃣', '8️⃣', '9️⃣', '🔟',
        '1️⃣1️⃣', '1️⃣2️⃣', '1️⃣3️⃣', '1️⃣4️⃣', '1️⃣5️⃣', '1️⃣6️⃣', '1️⃣7️⃣', '1️⃣8️⃣', '1️⃣9️⃣', '2️⃣0️⃣'
    ];

    for (let index in subscriberData.content) {
        if (index >= numberEmojis.length) {
            break;
        } // Stop if the index exceeds the number of available emojis
        let i = subscriberData.content[index];
        let fullAddress = `${i.addr1} ${i.addr2} ${i.addr3} ${i.addr4} ${i.city} ${i.pincode}`;
        resultText += `${numberEmojis[index]} Subscription Code: ${i.subscriptionCode}\nName: ${i.name}, Address: ${fullAddress}, \n\n`;
    }

    console.log(resultText, ""### resultText"");
    resolve(resultText);
});  "
37,668f9a6edf37288665444a75,returnCustomerInfoObj,aritra@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here

    let responseBody = {
        ""name"": data.variables.Name,
        ""contact"": data.variables.Phone,
        ""email"": data.variables.Email
    }

    console.log(responseBody, ""#Razorpay Customer Info Obj"");
    resolve(responseBody);
});    "
38,668f9a6edf37288cda444a57,getSubCodeFromIndex,aritra@yellow.ai,"return new Promise(resolve => {
    let index = data.variables.selectedIndex;
    console.log(index, ""Selected Address Index"");
    let sub_code = data.variables.subscriberData.content[index-1].subscriptionCode;
    console.log(sub_code, ""###Sub Code"");
    resolve(sub_code);
});    "
39,668f9a6edf37286442444a5b,getSeqNo,aritra@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here
    let seq_no = data.variables.seq_no;

    seq_no = seq_no+1;

    let seqNo = String(seq_no);
    console.log(seqNo, ""###Seq No"");
    resolve(seqNo);
});  "
40,668f9a6edf372847b5444a5c,trackOrder,aritra@yellow.ai,"return new Promise(resolve => {
    let apiRes = data.variables.trackOrderAPIObj;
    console.log(apiRes, ""###TrackOrder API Res."");

    let magazinesList = data.variables.magazinesListArray;

    // Step 1: Create a map for magazine_code to guid
    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = magazine.guid;
    });

    // Step 2: Iterate over apiRes.content and update each object with the corresponding guid
    apiRes.content = apiRes.content.map(item => {
        return {
            ...item,
            guid: magazineMap[item.magazine]
        };
    });

    console.log(apiRes.content, ""###Updated API Res Content"");

    // Despatch mode mapping
    const despatchModeMap = {
        RD: ""Registered Post"",
        MP: ""Magazine Post"",
        PO: ""Normal Post"",
        AI: ""Air"",
        BH: ""Hand"",
        BC: ""Courier""
    };

    // Filter content to only include items from the last year
    let oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    let filteredContent = apiRes.content.filter(item => {
        let issueDate = new Date(item.issCod);
        return issueDate >= oneYearAgo;
    });

    // Extract carouselList
    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";

    // Iterate over the filtered content
    for (let i of filteredContent) {
        let mag_name = magazinesList.find(mag => mag.magazine_code === i.magazine).slug;
        let mag_uri = `https://www.delhipress.in/subscribe/${mag_name}#single-magazine`;

        // Determine the dispatch date
        let dispatchDate = new Date(i.smssendDate || i.despDate).toLocaleDateString('en-GB');

        // Format the detailed information for the text field with strong tags
        let text = `<strong>Subscription Code:</strong> ${i.subscriptionCode}\n`;
        text += `<strong>Tracking ID:</strong> ${i.trackingId}\n`;
        text += `<strong>From Date:</strong> ${new Date(i.issCod).toLocaleDateString('en-GB')}\n`;
        text += `<strong>Despatch Mode:</strong> ${despatchModeMap[i.despatchMode] || 'Courier'}\n`;
        text += `<strong>Despatch Date:</strong> ${dispatchDate}\n`;
        text += `<strong>Mobile Number:</strong> ${i.mobileNo}\n`;
        text += `<strong>Name:</strong> ${data.variables.Name}\n`;

        carouselList.push({
            ""title"": magazinesList.find(mag => mag.magazine_code === i.magazine).name,
            ""text"": text,
            ""image"": images_prefix + i.guid.replace(""jpg"", ""png""),
        });
    }

    console.log(carouselList, ""###carouselList Array"");
    resolve(carouselList);
});
 "
41,668f9a6edf3728ea28444a60,getFromDate,aritra@yellow.ai,"

return new Promise(resolve => {
    const { purchaseHistoryArray, mag_code } = data.variables;
    console.log(purchaseHistoryArray, ""###Purchase History Array"");
    console.log(mag_code, ""###Selected Magazine Code"");

    // Filter subscriptions based on mag_code
    const subscriptions = purchaseHistoryArray.filter(sub => sub.magzCode === mag_code);

    if (subscriptions.length > 0) {
        // Find the subscription with the latest toDate
        const foundSubscription = subscriptions.reduce((max, sub) => {
            const toDate = new Date(sub.toDate);
            return toDate > new Date(max.toDate) ? sub : max;
        });

        const formatDate = date => date.toISOString();

        try {
            let toDate = new Date(foundSubscription.toDate);
            const today = new Date();

            // Check if toDate is less than current date
            if (toDate < today) {
                toDate = today;
            } else {
                toDate.setDate(toDate.getDate() + 1); // Add 1 day if toDate is not less than today
            }

            const formattedDate = formatDate(toDate);
            console.log(`Magazine: ${mag_code}, Updated Start Date: ${formattedDate}`);
            resolve(formattedDate);
        } catch (e) {
            console.error(`Magazine Not Found ${mag_code}: ${foundSubscription.toDate}`);
            resolve(formatDate(new Date())); // Resolve with current date Maz not found
        }
    } else {
        const formatDate = date => date.toISOString();
        const formattedCurrentDate = formatDate(new Date());
        console.log(`Magazine: ${mag_code} not found`);
        resolve(formattedCurrentDate);
    }
});


// return new Promise(resolve => {
//     const { purchaseHistoryArray, mag_code } = data.variables;
//     console.log(purchaseHistoryArray, ""###Purchase History Array"");
//     console.log(mag_code, ""###Selected Magazine Code"");
    
//     const foundSubscription = purchaseHistoryArray.find(sub => sub.magzCode === mag_code);

//     const formatDate = date => date.toISOString(); 
    
//     if (foundSubscription) {
//         try {
//             let toDate = new Date(foundSubscription.toDate);
//             const today = new Date();

//             // Check if toDate is less than current date
//             if (toDate < today) {
//                 toDate = today;
//             } else {
//                 toDate.setDate(toDate.getDate() + 1); // Add 1 day if toDate is not less than today
//             }

//             const formattedDate = formatDate(toDate);
//             console.log(`Magazine: ${mag_code}, Updated Start Date: ${formattedDate}`);
//             resolve(formattedDate);
//         } catch (e) {
//             console.error(`Invalid date format for magazine ${mag_code}: ${foundSubscription.toDate}`);
//             resolve(formatDate(new Date())); // Resolve with current date on error
//         }
//     } else {
//         const formattedCurrentDate = formatDate(new Date());
//         console.log(`Magazine: ${mag_code} not found`);
//         resolve(formattedCurrentDate);
//     }
// });

      "
42,668f9a6edf37289723444a61,waPhoneNoFormatter,aritra@yellow.ai,"return new Promise(resolve => {
    let phoneNumber = data.variables.Phone;

    // Extract the last 10 digits
    let convertedNumber = phoneNumber.slice(-10);

    return resolve(convertedNumber);
});
 "
43,668f9a6edf372805d1444a70,renewSelectedSlugWA,aritra@yellow.ai,"return new Promise(resolve => {
    let purchaseHistory = data.variables.subscribedItemsArray;
    let magazinesList = data.variables.magazinesListArray;
    let selectedIndex = data.variables.selectedIndex;

    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = magazine.guid;
    });

    const today = new Date();
    const sixMonthsAgo = new Date(today.getTime() - (6 * 30 * 24 * 60 * 60 * 1000));
    const sixMonthsFromNow = new Date(today.getTime() + (6 * 30 * 24 * 60 * 60 * 1000));

    let carouselList = purchaseHistory.filter(item => {
        const purchaseDate = new Date(item.fromDate);
        return purchaseDate >= sixMonthsAgo && purchaseDate <= sixMonthsFromNow;
    }).map(item => {
        return {
            ""slug"": item.slug
        };
    });

    const getSlugByIndex = (carouselList, index) => {
        return (index >= 0 && index < carouselList.length) ? carouselList[index].slug : null;
    };

    const selectedSlug = getSlugByIndex(carouselList, selectedIndex);

    resolve(selectedSlug);
});
"
44,668f9a6edf3728b7c9444a73,generatePaymentCode,aritra@yellow.ai,"function generateSubscriptionCode() {
    const prefix = 'YC';
    const maxLength = 7; // Length of the numerical part

    // Generate a random numerical part
    let numPart = '';
    for (let i = 0; i < maxLength; i++) {
        numPart += Math.floor(Math.random() * 10); // Random digit between 0 and 9
    }

    // Get current timestamp as string and use it as part of the code
    const timestamp = Date.now().toString();

    return prefix + numPart;
}

return new Promise(resolve => {
    let sub_code = generateSubscriptionCode();
    console.log(sub_code, ""Subscription Code Genrated"");
    return resolve(sub_code);
});   "
45,668f9a6edf3728e357444a2b,date,abhijeet.kumar@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here
        function getCurrentDateAsString() {
  // Create a new Date object to get the current date and time
  const currentDate = new Date();

  // Use Date object methods to extract year, month, day, hours, minutes, and seconds
  const year = currentDate.getFullYear();
  const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Month is zero-indexed, so add 1
  const day = String(currentDate.getDate()).padStart(2, '0');
  const hours = String(currentDate.getHours()).padStart(2, '0');
  const minutes = String(currentDate.getMinutes()).padStart(2, '0');
  const seconds = String(currentDate.getSeconds()).padStart(2, '0');

  // Construct the date string in the desired format (e.g., ""YYYY-MM-DD HH:MM:SS"")
  const dateString = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;

  return dateString;
}

// Call the function to get the current date as a string
const currentDateAsString = getCurrentDateAsString();

console.log(currentDateAsString); // Output the current date as a string

        resolve(currentDateAsString);
    }); "
46,668f9a6edf3728080a444a31,getSelectedMagazinDetails,aritra@yellow.ai,"

return new Promise(resolve => {

    const magazineList = data.variables.magazinesListArray;
    const magazineCodes = [""CA"", ""GH"", ""SAD""];

    const magazineDetails = [];
    magazineCodes.forEach(code => {
        const magazine = magazineList.find(mag => mag.magazine_code === code);
        if (magazine) {
            magazineDetails.push(magazine);
        } else {
            magazineDetails.push({ code: code, error: ""Magazine not found"" });
        }
    });

    console.log(magazineDetails, ""###Magazine Details"");
    return resolve(magazineDetails);

});              "
47,668f9a6edf37283a58444a34,selectLanguageSubscribe,aritra@yellow.ai,"return new Promise(resolve => {
    let itemDetailsObj = data.variables.itemDetailsObj;
    console.log(itemDetailsObj, ""####Selected Item Details"");

    let languages = itemDetailsObj.language;

    let languageList = [];
    
    for (let i of languages) {
        languageList.push({ title: i.name, text: i.slug });
    }

    // Dynamic Quick Reply | WhatsApp list to show Order Numbers
    let qrObject = {
        ""title"": ""Kindly choose the Language:"",
        ""options"": languageList
    };


    if (data.channel == ""whatsapp"") {
        qrObject = {
            title: 'Kindly choose the Language:',
            optionText: 'Options',
            options: [
                {
                    options: languageList
                }
            ]
        }
    }


    console.log(qrObject, ""### qrObject"");
    resolve(qrObject);
    
    resolve();
});        "
48,668f9a6edf37287760444a37,generateSubscriptionCode,aritra@yellow.ai,"
function generateSubscriptionCode() {
    const prefix = 'Y';
    const maxLength = 7; // Length of the numerical part

    // Generate a random numerical part
    let numPart = '';
    for (let i = 0; i < maxLength; i++) {
        numPart += Math.floor(Math.random() * 10); // Random digit between 0 and 9
    }

    // Get current timestamp as string and use it as part of the code
    const timestamp = Date.now().toString();

    return prefix + numPart;
}

return new Promise(resolve => {
    let sub_code = generateSubscriptionCode();
    console.log(sub_code, ""Subscription Code Genrated"");
    return resolve(sub_code);
});  "
49,668f9a6edf3728abd7444a42,getFAQs,aritra@yellow.ai,"return new Promise(resolve => {

    // let orderListArray = [
    //     ""How long will it take for my subscription to commence?"",
    //     ""How long will it take for my magazine to arrive?"",
    //     ""How can I change my current delivery address and Mobile No.,Email id ?"",
    //     ""I have not received magazine even after 15 days of payment? When can I get the magazines?"",
    //     ""I have not received my previous issues? How can I get them?"",
    //     ""I have received delivery SMS but my magazines have not been delivered?"",
    //     ""I have not received confirmation mail for my online subscription?"",
    //     ""I want to pay the subscription amount by NEFT. Please share details?"",
    //     ""I have received wrong magazine. How can I change the magazine?"",
    //     ""I want to change my current magazine. Please let me know the process?""
    // ];


    let orderListArray = [
        ""I have bought a subscription. When will I receive my first magazine?"",
        ""I have not received the magazine even after 15 days of making the payment. When will I receive the magazines?"",
        ""I am a subscriber but I haven’t received my latest issue."",
        ""I have not received the previous issues of my subscription. How can I get them?"",
        ""I have not received the confirmation email for the purchase of my subscription."",
        ""I have received the delivery SMS but I haven’t received the magazines."",
        ""I have received the wrong magazine."",
        ""I want to cancel my subscription. How do I do it?"",
        ""I want to change my current magazine subscription."",
        ""I would like to change my delivery address and contact number. How do I do that?"",
        ""I want to pay for the subscription amount via NEFT. Please share details."",
        ""Can I pay COD? Do you accept online payment on delivery?"",
        ""What happens if there is a payment failure?""
    ]

    console.log(orderListArray, ""OrderList Array"");

    let qrList = [];
    let qrListWA = [];

    for (let i of orderListArray) {
        qrList.push({ title: i, text: i });
        qrListWA.push({ title: ""Opn"", text: i, description: i });
    }


    // Dynamic Quick Reply | WhatsApp list to show Order Numbers
    let qrObject = {
        ""title"": ""I'll be happy to answer all your questions! Pick a question from the list."",
        ""options"": qrList
    };


    if (data.channel == ""whatsapp"") {
        qrObject = {
            title: 'Ill be happy to answer all your questions! Pick a question from the list.',
            optionText: 'Options',
            options: [
                {
                    options: qrListWA
                }
            ]
        }
    }


    console.log(qrObject, ""### qrObject"");
    return resolve(qrObject);

});               "
50,668f9a6edf3728bbd0444a46,usermessageValidation,aritra@yellow.ai,"return new Promise(resolve => {
    let user_input = data.variables.messageSubscriber;

    console.log(user_input, ""###User Message"");

    if(user_input.length <= 40){
        return resolve(""T"");
    }

    return resolve(""F"");  
});    "
51,668f9a6edf37288de6444a4c,getSelectedRenewObj,aritra@yellow.ai,"return new Promise(resolve => {
    let subscribtionsList = data.variables.apiResArray;
    console.log(subscribtionsList, ""####Sub List Array"");

    let selectedSubCode = data.variables.selectedSubCode;
    console.log(selectedSubCode, ""###SelectedSubCode"");
    resolve();
});   "
52,668f9a6edf372883bb444a4e,extractSelectedMagazinesWA,aritra@yellow.ai,"return new Promise(resolve => {
    let magazinesListArray = data.variables.magazinesListArray;
    console.log(magazinesListArray, ""###API Response - magazinesListArray"");

    let selected_type = data.variables.selected_type;
    let magazine_filter = """";
    if (selected_type === ""# Button 1"") {
        magazine_filter = ""champak_magazines"";
    } else if (selected_type === ""# Button 2"") {
        magazine_filter = ""champak_books"";
    }

    let index = data.variables.iteratorIndex || 0; // Set index to 0 if not provided

    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/sml/"";

    let priorityBooks = {
        ""champak_story_box"": 1,
        ""activity_books"": 2,
        ""early_childhood_books"": 3,
        ""magazine"": 4
    };

    let priorityMagazines = {
        ""CE"": 1,
        ""CH"": 2,
        ""HC"": 3,
        ""HG"": 4,
        ""CK"": 5,
        ""CM"": 6,
        ""CG"": 7,
        ""CT"": 8,
        ""CU"": 9
    };

    // Helper function to push magazines into carouselList based on the index
    function addMagazinesToCarousel(magazines) {
        let startIndex = index * 9;
        let endIndex = Math.min(magazines.length, startIndex + 9);

        for (let i = startIndex; i < endIndex; i++) {
            let magazine = magazines[i];
            carouselList.push({
                title: magazine.name.slice(0, 24),
                text: `${magazine.slug}`,
                description: """"
                // description: magazine.description.slice(0, 50)
            });
        }

        if (magazines.length > endIndex) {
            carouselList.push({
                title: ""Show More"",
                text: ""Show More"",
                description: """"
            });
        }
    }

    // Filter, prioritize, and add magazines to the carousel
    if (magazine_filter === ""champak_magazines"") {
        let filteredMagazines = magazinesListArray
            .filter(magazine => magazine.magazine_filter === magazine_filter && magazine.magazine_type !== ""combo_offer"")
            .sort((a, b) => (priorityMagazines[a.magazine_code] || 10) - (priorityMagazines[b.magazine_code] || 10));

        addMagazinesToCarousel(filteredMagazines);
    } else if (magazine_filter === ""champak_books"") {
        let filteredMagazines = magazinesListArray
            .filter(magazine => magazine.magazine_filter === magazine_filter && magazine.magazine_type !== ""combo_offer"")
            .sort((a, b) => (priorityBooks[a.magazine_type] || 10) - (priorityBooks[b.magazine_type] || 10));

        addMagazinesToCarousel(filteredMagazines);
    } else {
        addMagazinesToCarousel(magazinesListArray);
    }

    console.log(carouselList, ""###Carousel List Array"");

    let qrObject = {
        title: 'Kindly select from the available options:',
        optionText: 'Options',
        options: [
            {
                options: carouselList
            }
        ]
    };

    console.log(qrObject, ""###QR Object Magazines"");
    return resolve(qrObject);
});
  "
53,668f9a6edf372898d1444a53,getPaymentObject,aritra@yellow.ai,"return new Promise(resolve => {

    let itemDetailsObj = data.variables.itemDetailsObj;
    console.log(itemDetailsObj, ""###Items Obj --- "");

    let selectedPlan = data.variables.selected_plan;
    console.log(selectedPlan, ""###Selected Plan"");

    let name = itemDetailsObj.subscribe_item[0].guid;
    // let code = name.slice(0, 2).toUpperCase();
    let code = data.variables.selectedMazCodeG;

    let amount = String(data.variables.qrObj.amount);
    let duration = """";

    // Iterate through the plans to find the matching amount
    for (let plan of itemDetailsObj.plans) {
        if (String(plan.subprice) === amount) {
            duration = plan.tenure.split("" "")[0];
            break;
        }
    }

    let paymentData = {
        ""mag_code"": code,
        ""amount"": amount,
        ""payment_id"": data.variables.razorPayRes.reference_id,
        ""duration"": duration
    }

    console.log(paymentData, ""###PaymentData"");
    resolve(paymentData);
});







// return new Promise(resolve => {

//     let itemDetailsObj = data.variables.itemDetailsObj;
//     console.log(itemDetailsObj, ""###Items Obj --- "");

//     let selectedPlan = data.variables.selected_plan;
//     console.log(selectedPlan, ""###Selected Plan"");

    
//     let name = itemDetailsObj.subscribe_item[0].guid;
//     let code = name.slice(0, 2).toUpperCase();

    
//     let paymentData = {
//         ""mag_code"": code,
//         ""amount"": String(data.variables.qrObj.amount),
//         ""payment_id"": data.variables.razorPayRes.reference_id,
//         ""duration"": ""1""
//     }
    
//     console.log(paymentData, ""###PaymentData"");
//     resolve(paymentData);
// });                "
54,668f9a6edf3728fcb0444a58,testDataFunction,aritra@yellow.ai,"return new Promise(resolve => {
        // Your logic goes here
    let _data = data;
    // console.log(_data, 'Data');

    // let argsData = ymLib.args;
    // console.log(argsData, ""Arg data"")
    // // console.log(ymLib, ""ymLib"");
    // // console.log(data.message, ""data.message"");
    // // console.log(data, ""Data"");


    let context_data = context;
    console.log(context.history, ""###Context His"");
    resolve(_data);
});              "
55,668f9a6edf372800f8444a5d,getSubscriberName,aritra@yellow.ai,"return new Promise(resolve => {
    let subscriber_data = data.variables.subscriberData;
    let subscriber_name = subscriber_data.content[0].name;

    console.log(subscriber_name, ""###Sub Name"");
    resolve(subscriber_name);
});    "
56,668f9a6edf37289595444a5e,viewPurchaseHistory,aritra@yellow.ai,"return new Promise(resolve => {
    let purchaseHistory = data.variables.purchaseHistoryArray;
    console.log(purchaseHistory, ""###purchaseHistory API Res."");

    let magazinesList = data.variables.magazinesListArray;

    // Step 1: Create a map for magazine_code to guid
    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = magazine.guid;
    });

    // Despatch mode mapping
    const despatchModeMap = {
        RD: ""Registered Post"",
        MP: ""Magazine Post"",
        PO: ""Normal Post"",
        AI: ""Air"",
        BH: ""Hand"",
        BC: ""Courier""
    };


    // Extract carouselList
    let carouselList = [];
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/sml/"";

    purchaseHistory.forEach(item => {
        // Step 2: Update each purchase history item with the corresponding guid
        item.guid = magazineMap[item.magzCode];

        // Find the magazine corresponding to the item's magazine code
        let magazine = magazinesList.find(mag => mag.magazine_code === item.magzCode);

        // Check if a matching magazine is found
        if (magazine) {
            // Format the detailed information for the text field with strong tags
            let text = `<strong>Subscription Code:</strong> ${item.subscriptionCode}\n`;
            text += `<strong>From Date:</strong> ${new Date(item.fromDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
            text += `<strong>Expiry Date:</strong> ${new Date(item.toDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
            text += `<strong>Amount:</strong> Rs. ${String(item.amount)}/-\n`;
            text += `<strong>Despatch Mode:</strong> ${despatchModeMap[item.despatchMode] || 'Courier'}\n`;
            text += `<strong>Mobile Number:</strong> ${item.mobileNo}\n`;
            text += `<strong>Name:</strong> ${data.variables.Name}\n`;

            carouselList.push({
                ""title"": magazine.name,
                ""text"": text,
                ""image"": images_prefix + item.guid,
                // ""image"": images_prefix + item.guid.replace(""jpg"", ""png""),
            });
        } else {
            console.log(`Magazine not found for code: ${item.magzCode}`);
        }
    });


    console.log(carouselList, ""###carouselList Array"");
    resolve(carouselList);
});



// return new Promise(resolve => {
//     let apiRes = data.variables.trackOrderAPIObj;
//     console.log(apiRes, ""###TrackOrder API Res."");

//     let purchaseHistory = data.variables.purchaseHistoryArray;
//     let magazinesList = data.variables.magazinesListArray;

//     // Step 1: Create a map for magazine_code to guid
//     let magazineMap = {};
//     magazinesList.forEach(magazine => {
//         magazineMap[magazine.magazine_code] = magazine.guid;
//     });

//     // Step 2: Iterate over apiRes.content and update each object with the corresponding guid
//     apiRes.content = apiRes.content.map(item => {
//         return {
//             ...item,
//             guid: magazineMap[item.magazine]
//         };
//     });

//     console.log(apiRes.content, ""###Updated API Res Content"");

//     // Despatch mode mapping
//     const despatchModeMap = {
//         RD: ""Registered Post"",
//         MP: ""Magazine Post"",
//         PO: ""Normal Post"",
//         AI: ""Air"",
//         BH: ""Hand"",
//         BC: ""Courier""
//     };

//     // Extract carouselList
//     let carouselList = [];
//     let images_prefix = ""https://www.delhipress.in/assets/images/cover/yi/"";

//     for (let i of apiRes.content) {
//         let mag_name = magazinesList.find(mag => mag.magazine_code === i.magazine).slug;
//         let mag_uri = `https://www.delhipress.in/subscribe/${mag_name}#single-magazine`;

//         // Format the detailed information for the text field with strong tags
//         let text = `<strong>Subscription Code:</strong> ${i.subscriptionCode}\n`;
//         text += `<strong>From Date:</strong> ${new Date(i.fromDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
//         text += `<strong>To Date:</strong> ${new Date(i.toDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
//         text = `<strong>Amount :</strong> Rs.${i.amount}/-\n`;
//         text += `<strong>Despatch Mode:</strong> ${despatchModeMap[i.despatchMode] || 'Courier'}\n`;
//         text += `<strong>Mobile Number:</strong> ${i.mobileNo}\n`;
//         text += `<strong>Name:</strong> ${i.name}\n`; 
//         carouselList.push({
//             ""title"": magazinesList.find(mag => mag.magazine_code === i.magazine).name,
//             ""text"": text,
//             ""image"": images_prefix + i.guid.replace(""jpg"", ""png""),
//         });
//     }

//     console.log(carouselList, ""###carouselList Array"");
//     resolve(carouselList);
// });


                        "
57,668f9a6edf37283c68444a6b,toDateCombo,aritra@yellow.ai,"
return new Promise(resolve => {
    const fromDate = new Date(data.variables.entDate);
    const duration = data.variables.duration;

    // Set hours, minutes, seconds, and milliseconds to zero in UTC
    fromDate.setUTCHours(0, 0, 0, 0);

    console.log(duration, ""###Selected Duration in Years"");
    console.log(fromDate, ""###From Date"");

    // Calculate the end date based on the duration in years
    const endDate = new Date(fromDate.getTime() + (duration * 365.25 * 24 * 60 * 60 * 1000));

    console.log(endDate.getUTCDate(), ""endDate.getUTCDate() before subtraction"");
    endDate.setUTCDate(endDate.getUTCDate() - 1);  // Subtract one day
    console.log(endDate.getUTCDate(), ""endDate.getUTCDate() after subtraction"");

    console.log(endDate, ""###End Date"");

    if (isNaN(endDate.getTime())) {
        console.error(""Error: Invalid starting date provided."");
        resolve(null);
    } else {
        // Set hours, minutes, seconds, and milliseconds of endDate to zero in UTC
        endDate.setUTCHours(0, 0, 0, 0);

        const toDate = endDate.toISOString().slice(0, 10) + 'T00:00:00.000Z'; // Corrected slicing to get the ISO date format

        console.log(toDate, ""###ToDate"");
        resolve(toDate);
    }
});

"
58,668f9a6edf37283288444a6c,trackOrderWA,aritra@yellow.ai,"return new Promise(resolve => {
    let apiRes = data.variables.trackOrderAPIObj;
    let magazinesList = data.variables.magazinesListArray;

    console.log(apiRes, ""API res"");
    console.log(magazinesList, ""maz List"");
    // Create a map for magazine_code to guid
    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = magazine.guid;
    });

    // Update apiRes.content with the corresponding guid
    apiRes.content = apiRes.content.map(item => ({
        ...item,
        guid: magazineMap[item.magazine]
    }));

    // Despatch mode mapping
    const despatchModeMap = {
        RD: ""Registered Post"",
        MP: ""Magazine Post"",
        PO: ""Normal Post"",
        AI: ""Air"",
        BH: ""Hand"",
        BC: ""Courier""
    };

    // Filter content to only include items from the last year
    let oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    let filteredContent = apiRes.content.filter(item => {
        let issueDate = new Date(item.issCod);
        return issueDate >= oneYearAgo;
    });

    // Construct the text for WhatsApp view
    let whatsappText = filteredContent.map(item => {
        let mag = magazinesList.find(mag => mag.magazine_code === item.magazine);
        console.log(mag, ""###Mag Details"");
        let dispatchDate = new Date(item.smssendDate || item.despDate).toLocaleDateString('en-GB');
        return `📌 *Subscription Code:* ${item.subscriptionCode}\n` +
            `🔍 *Tracking ID:* ${item.trackingId}\n` +
            `📅 *From Date:* ${new Date(item.issCod).toLocaleDateString('en-GB')}\n` +
            `🚚 *Despatch Mode:* ${despatchModeMap[item.despatchMode] || '📦 Courier'}\n` +
            `📆 *Despatch Date:* ${dispatchDate}\n` +
            `📞 *Mobile Number:* ${item.mobileNo}\n` +
            `👤 *Name:* ${data.variables.Name}\n`;
    }).join('\n\n');

    console.log(whatsappText, ""### WhatsApp View Text"");
    resolve(whatsappText);
});
      "
59,668f9a6edf3728ef01444a6d,viewPurchaseHistoryWA,aritra@yellow.ai,"return new Promise(resolve => {
    let purchaseHistory = data.variables.purchaseHistoryArray;
    console.log(purchaseHistory, ""###purchaseHistory API Res."");

    let magazinesList = data.variables.magazinesListArray;

    // Step 1: Create a map for magazine_code to guid
    let magazineMap = {};
    magazinesList.forEach(magazine => {
        magazineMap[magazine.magazine_code] = magazine.guid;
    });

    // Despatch mode mapping
    const despatchModeMap = {
        RD: ""Registered Post"",
        MP: ""Magazine Post"",
        PO: ""Normal Post"",
        AI: ""Air"",
        BH: ""Hand"",
        BC: ""Courier""
    };

    // Extract text
    let images_prefix = ""https://www.delhipress.in/assets/images/cover/sml/"";
    let finalText = """";

    purchaseHistory.forEach((item, index) => {
        // Step 2: Update each purchase history item with the corresponding guid
        item.guid = magazineMap[item.magzCode];

        // Find the magazine corresponding to the item's magazine code
        let magazine = magazinesList.find(mag => mag.magazine_code === item.magzCode);

        // Check if a matching magazine is found
        if (magazine) {
            // Format the detailed information for the text field with strong tags and emojis
            let text = `📚 <strong>Subscription Code:</strong> ${item.subscriptionCode}\n`;
            text += `📅 <strong>From Date:</strong> ${new Date(item.fromDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
            text += `⌛ <strong>Expiry Date:</strong> ${new Date(item.toDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}\n`;
            text += `💰 <strong>Amount:</strong> Rs. ${String(item.amount)}/-\n`;
            text += `🚚 <strong>Despatch Mode:</strong> ${despatchModeMap[item.despatchMode] || 'Courier'}\n`;
            text += `📱 <strong>Mobile Number:</strong> ${item.mobileNo}\n`;
            text += `👤 <strong>Name:</strong> ${data.variables.Name}\n\n`;
            finalText += text; 
        } else {
            console.log(`Magazine not found for code: ${item.magzCode}`);
        }
    });

    console.log(finalText, ""###Final Text"");
    resolve(finalText);
});
 "
60,668f9a6edf372829ae444a2e,validatePhoneNo,aritra@yellow.ai,"return new Promise(resolve => {
    let phoneNumber = data.variables.Phone;
    console.log(phoneNumber, ""###User Given Phone No"");

    // Regular expression to match a valid Indian phone number format
    const phoneRegex = /^[6-9]\d{9}$/; 

    if (phoneRegex.test(phoneNumber)) {
        return resolve(""Valid""); 
    } else {
        return resolve(""InValid""); 
    }
});  "
61,668f9a6edf37284c46444a39,subscriberInfoObjVariable,aritra@yellow.ai,"return new Promise(resolve => {

    let subObj = {
        selected_plan: data.variables.selected_plan,
        selected_language: data.variables.selected_language,
        address: data.variables.address
    }

    console.log(subObj, ""###Subscriver Obj Var"");
    return resolve(subObj);
});  "
62,668f9a6edf3728597e444a4b,getRenewSubscribtionsList,aritra@yellow.ai,"return new Promise(resolve => {
    let subscribtionsList = data.variables.apiResArray;
    console.log(subscribtionsList, ""####Sub List Array"");


    let subList = [];

    for (let i of subscribtionsList) {
        subList.push({ title: i.subscriptionCode, text: i.subscriptionCode });
    }

    // Dynamic Quick Reply | WhatsApp list to show Order Numbers
    let qrObject = {
        ""title"": ""Kindly choose the Subscription Code:"",
        ""options"": subList
    };


    if (data.channel == ""whatsapp"") {
        qrObject = {
            title: 'Kindly choose the Subscription Code:',
            optionText: 'Options',
            options: [
                {
                    options: subList
                }
            ]
        }
    }


    console.log(qrObject, ""### qrObject"");
    resolve(qrObject);
});          "
63,668f9a6edf37281399444a51,subCodeGeneratorDB,aritra@yellow.ai,"return new Promise(resolve => {
    let sub_info_obj = data.variables.sub_db_info_obj;
    console.log(sub_info_obj, '#Sub info Object');

    let sub_code = sub_info_obj.records[0].sub_id;

    console.log(sub_code, ""###Sub Code"");

    let newID = `Y${(parseInt(sub_code.slice(1)) + 1).toString().padStart(7, '0')}`;
    console.log(newID, ""###New subscription ID"")

    resolve(newID);
});     "
64,668f9a6edf37284f79444a59,createOrderID,aritra@yellow.ai,"
function generateSubscriptionCode() {
    const prefix = 'X';
    const maxLength = 7; 

    // Generate a random numerical part
    let numPart = '';
    for (let i = 0; i < maxLength; i++) {
        numPart += Math.floor(Math.random() * 10); // Random digit between 0 and 9
    }

    // Get current timestamp as string and use it as part of the code
    const timestamp = Date.now().toString();

    return prefix + numPart;
}

return new Promise(resolve => {
    let order_id = generateSubscriptionCode();
    console.log(order_id, ""###Order ID"");
    return resolve(order_id);
});    "
65,668f9a6edf372826c6444a64,getMagCode,aritra@yellow.ai,"return new Promise(resolve => {
    let magazinesListArray = data.variables.magazinesListArray;

    let selected_product = data.variables.selectedProduct;
    console.log(selected_product, ""###Selected Product"");

    let selectedMagObj;

    for (let i of magazinesListArray) {
        let mag_name = i.slug;
        if (mag_name === selected_product) {
            selectedMagObj = i;
        }
    }


    let selected_magazine_code = selectedMagObj.magazine_code;
    console.log(selected_magazine_code, ""###Selected Maz Code"");

    resolve(selected_magazine_code);
});
 "
66,668f9a6edf37285a2e444a67,getSpecificMazCode,aritra@yellow.ai,"return new Promise(resolve => {
    let maz_code = data.variables.selectedMazCodeG;

    // Split the maz_code by '+' and filter out any empty strings
    let maz_codes = maz_code.split('+').filter(code => code.length > 0);
    let currentindex = data.variables.loopIndexNo;
    console.log(currentindex, ""### Current Index"");

    let currentMaz = maz_codes[currentindex-1];

    console.log(currentMaz, ""###Current Maz Code"");

    resolve(currentMaz);
});   "
67,668f9a6edf3728bdc6444a6a,modifyCityName,aritra@yellow.ai,"function modifyCityName(city) {
    const cityMapping = {
        ""New Delhi"": ""Delhi"",
        // Add more city mappings 
    };

    // Check if the city is in the mapping and return the modified name
    if (cityMapping[city]) {
        return cityMapping[city];
    }

    // If the city is not in the mapping, return the original city name
    return city;
}

return new Promise(resolve => {
    const inputCity = data.variables.city;
    const modifiedCity = modifyCityName(inputCity);
    console.log(modifiedCity); 

    resolve(modifiedCity);
});   "
68,668f9a6edf37286eae444a74,returnCustomerNotesObj,aritra@yellow.ai,"return new Promise(resolve => {
    // Your logic goes here

    let _paymentCodeStr = data.variables.paymentCodeStr;

    let responseBody = { 
    ""yellow_ai_chat_bot"": ""champak_website"", 
        ""merchant_order_id"": _paymentCodeStr
    }

    console.log(responseBody, ""Customer Notes Razorpay"");
    resolve(responseBody);
}); "
69,668f9a6edf37286139444a77,mazConfirmationObj,aritra@yellow.ai,"function formatDate(dateString) {
    // Parse the date string into a Date object
    // Remove any extra characters beyond the standard ISO format
    let isoDateString = dateString.replace(/Z+$/, 'Z');
    let date = new Date(isoDateString);

    // Get the day, month, and year
    let day = date.getDate();
    let month = date.getMonth() + 1; // Months are 0-based
    let year = date.getFullYear();

    // Format the day and month to ensure two digits
    if (day < 10) {day = '0' + day;}
    if (month < 10) {month = '0' + month;}

    // Format the date as dd-mm-yyyy
    let formattedDate = day + '-' + month + '-' + year;

    return formattedDate;
}

return new Promise(resolve => {
        // Your logic goes here
    let fromDate = data.variables.fromDateG;
    let toDate = data.variables.toDateG;
    let noOfIssues = data.variables.noOfIssuesG;

    console.log(fromDate, ""FromDATE"");
    console.log(toDate, ""ToDATE"");

    let resObj = {
        startDate: formatDate(fromDate),
        endDate: formatDate(toDate)
    }

    console.log(resObj, ""###Update Date Object"");
    resolve(resObj);
});        "
70,668f9a6edf37285a79444a36,getSubscriberAddress,aritra@yellow.ai,"function extractAddresses(data) {
    return data.map(item => [item.addr1, item.addr2, item.addr3, item.addr4, item.landmark, item.pincode, item.city, item.state_provience, item.country].filter(Boolean).join("", ""));
}


return new Promise(resolve => {
    
    let subscriberInfo = data.variables.subscriberData;
    console.log(subscriberInfo, ""###Subscriber Info"");
    let addressArray = subscriberInfo.content;
    console.log(addressArray, ""###Address Array"");

    let formattedAddresses = extractAddresses(addressArray);
    console.log(formattedAddresses, ""### User Addresses"");

    let resObj = {
        noOfAddresses: addressArray.length,
        addressList: formattedAddresses
    }

    return resolve(resObj);
});             "
71,668f9a6edf37287925444a3b,placeOrderObj,aritra@yellow.ai,"return new Promise(resolve => {

    let subscriberInfo = data.variables.subscriberData;
    console.log(subscriberInfo, ""###subscriberInfo"");

    let subscriberPlan = data.variables.subscriberInfoObj;
    console.log(subscriberPlan, ""###subscriberPlan"");
    
    let dataObj = {
        id: subscriberInfo.content[0].id,
        online_id: subscriberInfo.content[0].online_id || subscriberInfo.content[0].id,
        subscriptionCode: data.variables.subscriptionCode,
        subscriptionType: subscriberInfo.content[0].subscriptionType || null,
        quantity: 1,
        entDate: subscriberInfo.content[0].entDate || null,
        name: subscriberInfo.content[0].name || null,
        email: subscriberInfo.content[0].email || null,
        mobileNo: subscriberInfo.content[0].mobileNo || null,
        orgn_code: subscriberInfo.content[0].orgn_code || null,
        locationCode: subscriberInfo.content[0].locationCode || null,
        addr1: subscriberInfo.content[0].addr1 || null,
        addr2: subscriberInfo.content[0].addr2 || null,
        addr3: subscriberInfo.content[0].addr3 || null,
        addr4: subscriberInfo.content[0].addr4 || null,
        landmark: subscriberInfo.content[0].landmark || null,
        pincode: subscriberInfo.content[0].pincode || null,
        city: subscriberInfo.content[0].city || null,
        city_code: subscriberInfo.content[0].city_code || null,
        state_provience: subscriberInfo.content[0].state_provience || null,
        country: subscriberInfo.content[0].country || null,
        insert_flag_for_ca: ""YI"",
        update_flag_for_ca: """",
        insert_flag_for_dp: ""YI"",
        update_flag_for_dp: """",
        address_information: subscriberInfo.content[0].address_information || null,
        userName: ""yellow"",
        subscriberInfo: subscriberInfo,
        subscriberPlan: data.variables.subscriberInfoObj.selected_plan
    };
    
    console.log(dataObj, ""###Request Body"");
    return resolve(dataObj);
});
               "
72,668f9a6edf37287ce2444a44,phoneNoFormatter,aritra@yellow.ai,"return new Promise(resolve => {
    let phoneNumber = data.variables.Phone;
    
    let convertedNumber = phoneNumber.substring(phoneNumber.indexOf('-') + 1);

    return resolve(convertedNumber);
});      "
73,668f9a6edf37283731444a47,selectSubscribtionCode,aritra@yellow.ai,"return new Promise(resolve => {
    let subscriberData = data.variables.subscriberData;
    console.log(subscriberData, ""subscriberData Obj"");

    let carouselList = [];

    

    for (let i of subscriberData.content) {
        let fullAddress = `${i.addr1} ${i.addr2} ${i.addr3} ${i.addr4} ${i.city} ${i.pincode}`;
        carouselList.push({
            ""title"": i.subscriptionCode,
            ""description"": ""Subscription Code: "" + i.subscriptionCode,
            ""actions"": [
                {
                    ""title"": `Name: ${i.name}\n, Address: ${fullAddress}`,
                    ""buttonDefault"": ""text"",
                    ""text"": i.subscriptionCode
                }
            ]
        });
    }

    console.log(carouselList, ""### carouselList"");
    resolve(carouselList);
});




// return new Promise(resolve => {
//     let subscriberData = data.variables.subscriberData;
//     console.log(subscriberData, ""subscriberData Obj"");

//     let qrList = [];

//     for (let i of subscriberData.content) {
//         qrList.push({ title: i.subscriptionCode, text: i.subscriptionCode });
//     }

//     // Dynamic Quick Reply | WhatsApp list to show Order Numbers
//     let qrObject = {
//         ""title"": ""Get ready to roll! Just pick the subscription code that speaks to you and let's make moves! 🚀"",
//         ""options"": qrList
//     };


//     if (data.channel == ""whatsapp"") {
//         qrObject = {
//             title: 'Get ready to roll! Just pick the subscription code that speaks to you and lets make moves! 🚀',
//             optionText: 'Options',
//             options: [
//                 {
//                     options: qrList
//                 }
//             ]
//         }
//     }


//     console.log(qrObject, ""### qrObject"");
//     return resolve(qrObject);

// });                         "
74,668f9a6edf37283d13444a4d,extractMagazinsCode,aritra@yellow.ai,"function findSlugByCode(data, magazineCode) {
    // Loop through the data array
    for (const item of data) {
        if (item.magazine_code === magazineCode) {
            // Return the slug if magazine code matches, exit the loop
            return item.slug;
        }
    }
    // Return undefined if no match found
    return undefined;
}

return new Promise(resolve => {
    let magazinesListArray = data.variables.magazinesListArray;
    console.log(magazinesListArray, ""###API Response - magazinesListArray"");

    let selectedMagazinCode = data.variables.selected_plan;
    console.log(selectedMagazinCode, ""Selected Code"");

    let slug_name = findSlugByCode(magazinesListArray, selectedMagazinCode);

    console.log(slug_name, ""###Slug Name"");
    resolve(slug_name);
});         "
75,668f9a6edf37282b74444a50,getMagLanguage,aritra@yellow.ai,"return new Promise(resolve => {
    let magazinesListArray = data.variables.magazinesListArray;
  
    let selected_product = data.variables.selectedProduct;
    console.log(selected_product, ""###Selected Product"");
 
    let selectedMagObj;

    for (let i of magazinesListArray) {
        let mag_name = i.slug;
        if (mag_name === selected_product){
            selectedMagObj = i;
        }
    }

    console.log(selectedMagObj, ""Selected Magazin Obj"");

	let selected_magazine_code = selectedMagObj.magazine_code;

    const languageMap = {
        // Magazine Code : Language
        CE: ""English"",
        CH: ""Hindi"",
        HC: ""English"",
        HG: ""English"",
        CK: ""Kannada"",
        CM: ""Marathi"",
        CG: ""Gujarati"",
        CT: ""Tamil"",
        CU: ""Telugu""
    };
    
    let selected_language = languageMap[selected_magazine_code] || ""English"";
    console.log(selected_language, ""###Selected Lang"");
   
    resolve(selected_language);
});
     "
76,668f9a6edf372887fa444a68,getMultiMazAmount,aritra@yellow.ai,"return new Promise(resolve => {
    let amount = Number(data.variables.paymentResObjG.amount);
    let totalItems = Number(data.variables.no_of_maz_code);

    let updatedAmount = amount / totalItems;

    console.log(updatedAmount, ""###Single Item Amount"");
    resolve(String(updatedAmount));
});  "
77,668f9a6edf37282ea6444a72,getSubCodeWA,aritra@yellow.ai,"return new Promise((resolve, reject) => {
    let subscriberData = data.variables.subscriberData;
    let index = data.variables.selectedIndex;
    console.log(subscriberData, ""subscriberData Obj"");
    console.log(index, ""index input"");

    // Validate the index
    if (index < 0 || index >= subscriberData.content.length) {
        reject(""Index out of bounds"");
        return;
    }

    // Extract the subscription code based on the index
    let subscriptionCode = subscriberData.content[index-1].subscriptionCode;

    console.log(subscriptionCode, ""### subscriptionCode"");
    resolve(subscriptionCode);
});
 "
